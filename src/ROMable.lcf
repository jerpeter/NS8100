/* FORCE_ACTIVE {__SGFM_configuration_field}  // Prevents deadstripping of SGFM config fld */

#if 0
SECTIONS
{	
  .vectormap :					           // Put the vector map at the very beginning
  {
    . = ALIGN(0x400);				       // Align table on 1024-byte boundary per
    __exception_table_start__ = .;	       // MCore requirement
    vector.s  (.rodata)		               // File of vector table
	  __exception_table_end__ = .;
  } > VECTORS  				               // Map to VECTORS memory section (0x000-0x1FF)
  
  .main_application :				       // Application Code
  {
    startup.s  (.text)
    rom_copy.c (.text)
    mmc2114_init.c (.text)
    main.c     (.text)
    *  (.text)
    *  (.rodata)
    __data_in_ROM_begin = .;  
  } > TEXT							       // Map to TEXT section
			    
  
  .main_application_data:
  {
    __bss_begin = .;
  	*  (.bss)
  	__bss_end = .;
  } > DATA
  
  
  .main_application_romdata : AT(__data_in_ROM_begin)
  {			  						       // A section of data to be copied to RAM
    . = ALIGN(0x4);
    __data_in_RAM_begin = .;               // Sets location variable used in rom_copy
    *  (.data)						       // Just include data in all modules for now
    __data_in_RAM_end = .;                 // to be copied to RAM
  } > ROMDATA
    
MEMORY
{
  VECTORS (R)  : ORIGIN = 0x0000A000,	    LENGTH = 0X00000200
  TEXT    (RX) : ORIGIN = AFTER(VECTORS),   LENGTH = 0x00000000
  MLOG    (RW) : ORIGIN = 0x81800000,       LENGTH = 0x00001000
  TABLE   (RW) : ORIGIN = 0x81801000,       LENGTH = 0x0000A000
  DATA    (RW) : ORIGIN = AFTER(TABLE),     LENGTH = 0x00000000
  ROMDATA (RW) : ORIGIN = AFTER(DATA),      LENGTH = 0x00000000
}


// Carving up TABLE space
  __monitorLogTblKey = 0x81800000;
  __monitorLogTblIndex = 0x81800004;
  __monitorLogUniqueEntryId = 0x81800006;
  __monitorLogTbl = 0x81800008;
  __autoDialoutTblKey = 0x81800FE8;
  __autoDialoutTbl = 0x81800FEC;
  __ramFlashSummaryTblKey = 0x81801000;
  __ramFlashSummaryTbl = 0x81801004;
  
// Calculations and assignments of section sizes
  __internal_ram = 0x00800000;    
  __stack_end 	= __internal_ram + 0x1000;
  __stack_begin	= __stack_end + 0x3F00; 	
  __stack_begin	= (__stack_begin + 7) & ~7;

  __heap_addr 	= __stack_begin + 0x0100;  // see MSL alloc.c
  __heap_end 	= __heap_addr + 0x2800;		
  __heap_size 	= __heap_end - __heap_addr;
	

  //  ROM to RAM
  __data_size = __data_in_RAM_end - __data_in_RAM_begin;
  
  // Metrowerks runtime libs need these variables
  __data_begin = __data_in_RAM_begin;
  __data_ROM_begin = __data_in_ROM_begin;
  
  // Addresses for SPI Module Registers
  __SPI_CONTROL_ONE_REG_ADDR        = 0x00CB0000;
  __SPI_CONTROL_TWO_REG_ADDR        = 0x00CB0001;
  __SPI_BAUD_RATE_REG_ADDR          = 0x00CB0002;
  __SPI_STATUS_REG_ADDR             = 0x00CB0003;
  __SPI_DATA_REG_ADDR               = 0x00CB0005;
  __SPI_PULLUP_REDUCED_DRV_REG_ADDR = 0x00CB0006;
  __SPI_PORT_DATA_REG_ADDR          = 0x00CB0007;
  __SPI_PORT_DATA_DIR_REG_ADDR      = 0x00CB0008;
}
#endif
